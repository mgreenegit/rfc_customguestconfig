pool: 
  vmImage: 'windows-2019'

pr: none

variables:
  - group: vmusers
  - name: 'major'
    value: '1'
  - name: 'minor'
    value: '2'
  - name: 'requiredModules'
    value: 'GuestConfiguration' 
  - name: 'resourcegroup'
    value: 'gcInSpec12'
  - name: 'storageAccountName'
    value: 'gcinspec12'
  - name: 'storageContainerName'
    value: 'artifacts'
  - name: 'linuxConfigName'
    value: 'firewalldenabled'
  - name: 'linuxPolicyVersion'
    value: '1.0.0.0'
  - name: 'linuxAssignmentName'
    value: '72cf8be5-ca7e-425b-a37b-d6340a3f1635'
  - name: 'windowsPolicyVersion'
    value: '1.0.0.0'
  - name: 'windowsConfigName'
    value: 'windowsfirewallenabled'
  - name: 'windowsAssignmentName'
    value: '2067efd3-5978-4372-b7ba-c7b2060dd889'

trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - README.md
    - LICENSE
    - .gitignore
    - .github/*

steps:

  
- task: AzurePowerShell@4
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |

      $assignments = foreach ($initiative in (
        Get-AzPolicySetDefinition -Custom | ? {$_.Properties.metadata.category -eq 'Guest Configuration'}
        )) {
          Get-AzPolicyAssignment -PolicyDefinitionId $initiative.ResourceId
        }
      
      foreach ($assignment in $assignments) {
        Remove-AzPolicyAssignment -Name $assignment.Name -Scope $assignment.Properties.scope
        }
      
      Get-AzPolicySetDefinition -Custom | ? {$_.Properties.metadata.category -eq 'Guest Configuration'} | Remove-AzPolicySetDefinition -Force
      Get-AzPolicyDefinition -Custom | ? {$_.Properties.metadata.category -eq 'Guest Configuration'} | Remove-AzPolicyDefinition -Force

      # hold for 30 seconds to allow georeplication of the change
      Start-Sleep 30

  displayName: 'Clean up any existing custom Guest Configuration policies in the subscription'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Install required modules from PowerShell Gallery
      Install-Module -Name $(requiredModules),PSScriptAnalyzer `
        -Repository 'PSGallery' `
        -Scope 'CurrentUser' `
        -Verbose `
        -Force
      
  displayName: 'Setup/validate Windows PowerShell environment'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # Lint PowerShell scripts
      Invoke-ScriptAnalyzer -Path '$(Build.SourcesDirectory)\guestConfiguration\' `
        -IncludeDefaultRules `
        -Recurse `
        -Severity Error `
        -ReportSummary `
        -EnableExit

  displayName: 'Lint PowerShell scripts in Guest Configuration content'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Compile DSC MOF files

        # Make custom resource available to PowerShell/WMI
        mkdir "$env:ProgramFiles\WindowsPowerShell\Modules\gcInSpec"
        Copy-Item "$(Build.SourcesDirectory)\guestConfiguration\Windows\gcInSpec" "$env:ProgramFiles\WindowsPowerShell\Modules\" -Recurse -Force
        Import-Module "$env:ProgramFiles\WindowsPowerShell\Modules\gcInSpec\gcInSpec.psd1"

        # validate DSC custom module
        winrm quickconfig -quiet
        get-dscresource gcinspec
        invoke-dscresource -Name gcInSpec -Method Test -ModuleName gcInSpec -Property @{name='foo'} -Verbose
        invoke-dscresource -Name gcInSpec -Method Get -ModuleName gcInSpec -Property @{name='foo'} -Verbose

        # cleanup from test
        Remove-Item "$env:ProgramFiles\WindowsPowerShell\Modules\gcInSpec\" -Recurse -Force

        # Make custom resource available to PowerShell
        $env:PSModulePath = $env:PSModulePath+';$(Build.SourcesDirectory)\guestConfiguration\Windows\'

        # Linux configuration
        . $(Build.SourcesDirectory)\guestConfiguration\Linux\$(linuxConfigName).ps1
        $(linuxConfigName) -out '$(Build.SourcesDirectory)\guestConfiguration\Linux'

        # Windows configuration
        . $(Build.SourcesDirectory)\guestConfiguration\Windows\$(windowsConfigName).ps1
        $(windowsConfigName) -out '$(Build.SourcesDirectory)\guestConfiguration\Windows'
      
  displayName: 'Compile DSC MOF files'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Create artifacts folder
      New-Item -Path '$(Build.SourcesDirectory)\artifacts\' -Type Directory

      # Make custom resource available to PowerShell
      $env:PSModulePath = $env:PSModulePath+';$(Build.SourcesDirectory)\guestConfiguration\Windows\'
      
      # Create artifacts
      
        # New guest configuration package for Linux
        New-GuestConfigurationPackage -Name '$(linuxConfigName)' `
        -Configuration '$(Build.SourcesDirectory)\guestConfiguration\Linux\$(linuxConfigName).mof' `
        -FilesToInclude '$(Build.SourcesDirectory)\guestConfiguration\Linux\InSpecProfiles' `
        -DestinationPath '$(Build.SourcesDirectory)\artifacts\' `
        -Verbose

        # New guest configuration package for Windows
        New-GuestConfigurationPackage -Name '$(windowsConfigName)' `
        -Configuration '$(Build.SourcesDirectory)\guestConfiguration\Windows\$(windowsConfigName).mof' `
        -FilesToInclude '$(Build.SourcesDirectory)\guestConfiguration\Windows\InSpecProfiles' `
        -DestinationPath '$(Build.SourcesDirectory)\artifacts\' `
        -Verbose
  
  displayName: 'Create content artifacts'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      location: 'CentralUS'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Build.SourcesDirectory)\deploymentFiles\deploy.storagecontainer.json'
      overrideParameters: -storageAccountName $(storageAccountName) -containerName $(storageContainerName)

  displayName: 'Create/validate Azure storage account and container'

- task: AzurePowerShell@4
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |

      # Get Storage Context
      $Context = Get-AzStorageAccount -ResourceGroupName $(resourcegroup) `
        -Name $(storageAccountName) | `
        ForEach-Object {$_.Context}

      # Upload files
      Set-AzStorageBlobContent -Context $Context `
        -Container $(storageContainerName) `
        -File '$(Build.SourcesDirectory)\artifacts\$(linuxConfigName)\$(linuxConfigName).zip' `
        -Blob '$(linuxConfigName).zip' `
        -Force `
        -Verbose
      Set-AzStorageBlobContent -Context $Context `
        -Container $(storageContainerName) `
        -File '$(Build.SourcesDirectory)\artifacts\$(windowsConfigName)\$(windowsConfigName).zip' `
        -Blob '$(windowsConfigName).zip' `
        -Force `
        -Verbose

      # Get url with SAS token
      $StartTime = (Get-Date)
      $ExpiryTime = $StartTime.AddYears('3')
      $linuxArtifactSAS = New-AzStorageBlobSASToken -Context $Context `
        -Container $(storageContainerName) `
        -Blob '$(linuxConfigName).zip' `
        -StartTime $StartTime `
        -ExpiryTime $ExpiryTime `
        -Permission rl `
        -FullUri `
        -Verbose
      $windowsArtifactSAS = New-AzStorageBlobSASToken -Context $Context `
        -Container $(storageContainerName) `
        -Blob '$(windowsConfigName).zip' `
        -StartTime $StartTime `
        -ExpiryTime $ExpiryTime `
        -Permission rl `
        -FullUri `
        -Verbose

      # Build Policy parameter tables
      $linuxPolicyParameterInfo = @(
        @{
            Name = 'DefaultFirewalldProfile'                                                                        # Policy parameter name (mandatory)
            DisplayName = 'Default Firewalld Profile.'                                                              # Policy parameter display name (mandatory)
            Description = "Choose the default profile for Firewalld."                                               # Policy parameter description (optional)
            ResourceType = "ChefInSpecResource"                                                                     # dsc configuration resource type (mandatory)
            ResourceId = 'firewalldenabled'                                                                         # dsc configuration resource property name (mandatory)
            ResourcePropertyName = "AttributesYmlContent"                                                           # dsc configuration resource name; do not include any backslashes (mandatory)
            DefaultValue = 'public'                                                                                 # Policy parameter default value (optional)
            AllowedValues = @('drop','block','public','external','dmz','work','home','internal','trusted')          # Policy parameter allowed values (optional)
        }
      )
      $windowsPolicyParameterInfo = @(
        @{
            Name = 'EnablePublicProfile'                                                                            # Policy parameter name (mandatory)
            DisplayName = 'Enable Public profile'                                                                   # Policy parameter display name (mandatory)
            Description = "Enables Windows Firewall for Public profile. (0 to Disable, 1 to Enable)"                # Policy parameter description (optional)
            ResourceType = "Registry"                                                                               # dsc configuration resource type (mandatory)
            ResourceId = 'EnableFirewall'                                                                           # dsc configuration resource name; do not include any backslashes (mandatory)
            ResourcePropertyName = "ValueData"                                                                      # dsc configuration resource property name (mandatory)
            DefaultValue = '1'                                                                                      # Policy parameter default value (optional)
            AllowedValues = @('0','1')                                                                              # Policy parameter allowed values (optional)
        }
      )
      
      # Overwrite definition/initiative files
      New-GuestConfigurationPolicy -ContentUri $linuxArtifactSAS `
        -DisplayName 'Audit when Firewalld is not enabled' `
        -Description 'Validates that the Firewalld package is installed, running, and that the default zone is public' `
        -Version $(linuxPolicyVersion) `
        -DestinationPath '$(Build.SourcesDirectory)\policyFiles\Linux' `
        -Platform Linux `
        -Parameter $linuxPolicyParameterInfo `
        -Verbose
      New-GuestConfigurationPolicy -ContentUri $windowsArtifactSAS `
        -DisplayName 'Audit when Windows Firewall is not enabled' `
        -Description 'Validates that the Windows host firewall package is enabled and that the default zone is public' `
        -Version $(windowsPolicyVersion) `
        -DestinationPath '$(Build.SourcesDirectory)\policyFiles\Windows' `
        -Platform Windows `
        -Verbose
      
      # Publish definitions/initiatives
      $publishedLinuxPolicies = Publish-GuestConfigurationPolicy -Path '$(Build.SourcesDirectory)\policyFiles\Linux\' -Verbose
      $publishedWindowsPolicies = Publish-GuestConfigurationPolicy -Path '$(Build.SourcesDirectory)\policyFiles\Windows\' -Verbose

      # Update InitiativeID so it can be passed to assignment
      $linuxAssignmentName = $publishedLinuxPolicies | `
        Where-Object {$_.ResourceType -eq 'Microsoft.Authorization/policySetDefinitions'} | `
        ForEach-Object {$_.Name}
      $linuxInitiativeId = Get-AzPolicySetDefinition -Name $linuxAssignmentName | ForEach-Object {$_.Name}
      $windowsAssignmentName = $publishedWindowsPolicies | `
        Where-Object {$_.ResourceType -eq 'Microsoft.Authorization/policySetDefinitions'} | `
        ForEach-Object {$_.Name}
      $windowsInitiativeId = Get-AzPolicySetDefinition -Name $windowsAssignmentName | ForEach-Object {$_.Name}
      
      # Output values to build variables for later tasks to consume as setvarStep.name
      Write-Host "##vso[task.setvariable variable=linuxInitiativeId]$linuxInitiativeId"
      Write-Host "##vso[task.setvariable variable=windowsInitiativeId]$windowsInitiativeId"

  displayName: 'Upload artifacts, get SAS tokens and publish definitions/initiatives'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      location: 'CentralUS'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Build.SourcesDirectory)\deploymentFiles\deploy.assignment.json'
      overrideParameters: -assignmentName $(linuxAssignmentName) -assignmentDisplayName 'Audit when Firewalld is not enabled' -initiativeId $(linuxInitiativeId) -resourceGroupName $(resourcegroup)

  displayName: 'Deploy Policy assignment for Linux'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      location: 'CentralUS'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Build.SourcesDirectory)\deploymentFiles\deploy.assignment.json'
      overrideParameters: -assignmentName $(windowsAssignmentName) -assignmentDisplayName 'Audit when Windows Firewall is not enabled' -initiativeId $(windowsInitiativeId) -resourceGroupName $(resourcegroup)

  displayName: 'Deploy Policy assignment for Windows'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      Start-sleep -seconds 60
      
  displayName: 'Allow time for the Assignment to be replicated across geographies'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      location: 'CentralUS'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Build.SourcesDirectory)\deploymentFiles\deploy.roleassignment.json'
      overrideParameters: -assignmentName $(linuxAssignmentName) -resourceGroupName $(resourcegroup)

  displayName: 'Deploy Policy role assignment for Linux'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      location: 'CentralUS'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Build.SourcesDirectory)\deploymentFiles\deploy.roleassignment.json'
      overrideParameters: -assignmentName $(windowsAssignmentName) -resourceGroupName $(resourcegroup)

  displayName: 'Deploy Policy role assignment for Windows'
  
- task: PublishPipelineArtifact@0
  inputs:
    targetPath: '$(Build.SourcesDirectory)\artifacts\$(linuxConfigName)\$(linuxConfigName).zip'
    artifactName: '$(linuxConfigName)'
  
    displayName: 'Publish Linux package artifact to trigger CI integration tests'

- task: PublishPipelineArtifact@0
  inputs:
    targetPath: '$(Build.SourcesDirectory)\artifacts\$(windowsConfigName)\$(windowsConfigName).zip'
    artifactName: '$(windowsConfigName)'
  
    displayName: 'Publish Windows package artifact to trigger CI integration tests'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      location: 'CentralUS'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Build.SourcesDirectory)\deploymentFiles\deploy.testenv.json'
      overrideParameters: -adminUsername $(adminUsername) -adminPassword $($(adminPassword) | ConvertTo-SecureString -asplaintext -force)

  displayName: 'Deploy test servers'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # Create remediation template
      $policy     = Get-Content '$(Build.SourcesDirectory)\policyFiles\Windows\DeployIfNotExists.json' | ConvertFrom-Json
      $template   = $policy.properties.policyRule.then.details.deployment.properties.template
      $parameters = $policy.properties.policyRule.then.details.deployment.properties.parameters

      # Set parameter default values from policy in template
      $template.parameters.configurationName = $parameters.configurationName.value
      $template.parameters.contentHash = $parameters.contentHash.value
      $template.parameters.contentUri = $parameters.contentUri.value

      $template | ConvertTo-Json | Set-Content '$(Build.SourcesDirectory)\deploymentFiles\deploy.remediateWindows.json'

  displayName: 'Dynamically create remediation template'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      location: 'CentralUS'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Build.SourcesDirectory)\deploymentFiles\deploy.remediateWindows.json'
      overrideParameters: -vmName 'windows' -location 'centralus'

  displayName: 'Deploy remediation for Windows'
